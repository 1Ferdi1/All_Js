//Фреймворк реакт

Продуктовая разработка в абсолютном большинстве случаев ведётся с использованием какого бы то ни было фреймворка. 

1. React ~ 90%
2. Angular ~ 7-8%
3. Vue

Причина введения разработки на фреймворке следующая:
- Код получается стандартизированным, написанным на одном прапарадигме. 
- Намного легче на рынке найти программиста, который сможет это сопровождать и поддерживать.

Разработка на реакте введётся с использованием некоторых расширениями над языком js. 
При разработке запускается локальный сервер, который на лету кампилирует код и автоматически обновляет страницу при изменении кода.
Для сборки проекта используются различные сборщики, которые собирают весь код воедино, транслируют его обратно в js, 
применяют все необходимые полифилы в случае применении на старых браузерах и делают сборку, которая состоит из файлов индекс хтмл, 
в котором подключается один файл.
Запуск локального сервера в фреймворке осуществляется в программе note.js. Эта программа, которая умеет запускать js вне браузера.
У note.js нет ограничений безопасности, которые есть у браузера, в частности нет запрета на взаимодействии с файловой системой.
Note позволяет внутри себя использовать пакетные менеджеры (это программа, которая позволяет устанавливать все необходимые библиотеки 
и зависимости автоматически, выкачивая их из интернета)

npm (пакетный менеджер, который мы будем использовать) npm install socket.io

Для создания нового реакт приложения используется библиотека npx (её необходимо установить)

Новая реакт приложение всегда создаётся в новой папке. Команда для создания нового реакт приложения npx create-react-app
При выполнении этой команды в дирректрори будет создана папка my-app, в которую будет установлена новая пустое react приложение.
my-app
  node_modules/
  public/
  src/
  *gitignore

  Автоматически сгенерированый файл в коттром созданы Можно и нужно перезаписывать, в нем пишется вся необходимая информация для работы с проектом.
  package.json Файл , В котором написаны зависмоисти необходимые для работы приложения.
  Зависимости необходиыме для работы приложения устанавливаются в папку node_modules.
  В файле index.html ничего не надо трогать кроме тега title

После того как проект сохдан его можно рахвернуть в люом новом месте имея с собой только вышеперечисленную кодовую базу выполнив команду npm install в директории проекта 
При выполенении коиманды будем выполнег файл пэкэдж джсон все зависимости из него будут выкачены из интернета и установлены в папку node_modules
После создания реакт приложения или развёрнуто на новом месте выполянется команда в директории проекта npm start, которая запускает локальный сервер, в нём разворачивает приложение и оно становится доступно по адресу localhost:3000
Разработка на локальном сервере ведётся для того чтобы приложение которое мы разрабатываем можно было открыть не только на локальном компьютере, но и на мобильном устройстве используется вместо localhost, ip компьютера
Особенности разработки:
Поскольку разработка введётся внутри Node.js это накладывает определённык новшества или изменения относительно браузерного жс и самое главное по умолчанию Node-овый замкнут внутри файла сам по себе.
Для того чтобы какая-либо переменная структура данных были доступны снаружи используетсч конструкция export
Например: 
//app.js
   const a = 17;
   const f = (b) => a * b;

   export f;
   export a;
 
Экспортированные функции можно импортировать из других файлов.

//index.js 
import {f} from
  'путь до app.js';

Второй способ Экспортирования это export default f;

Экспортов из файлов может быть сколько угодно, export default из файлов может быть только один. Импортов может быть сколько угодно. Запрещено импортировать из одного и того де файла несколько раз. Запрещены циклические импорты.
Ключевым элементом реакта является понятие компоненты. Компонента в реакте это класс, отнаследованный от реакт компоненты.
class App extends React.Component{
     render() {
        render(<div className = "app"><h1> Всем два!!! </h1>
          <Menu />
        </div>);
     }
}

Для избежания конфликтов ключевых слов в тегах используется класс нэйм.
Компоненты умеют подключать другие компоненты.
Компонента подключается прямо в разметку родительской компоненты в виде тега с соответствующим названием. Например app.
Уровень вложенности компонент не ограничен.  
В любую компоненту можно передать любое количество аргументов. Обобщенно они называются пропертис или сокращённо пропс. 
Каждый из пропсей задаётся в виде атрибута при вызове компонент. 
Пропертис в компоненту передаются либо в виде примитива в виде строки либо если необходимо в виде непримитива то фигурной скобкой

class Menu extends
   constructor(props) {
   super(props);
   props.val -> Вася
   props.Key1 ->

Вся разработка ведётся только внутри папки src. там будет неесколько файлов среди которых индекс жс его не трогать. и будет апп жс(левая коимпонента)
В реакте в каждой компоненте можно использовать свой css файл.
